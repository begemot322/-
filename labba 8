import tkinter as tk
from tkinter import scrolledtext
def cwr(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
    if not n and r:
        return
    indices = [0] * r
    yield tuple(pool[i] for i in indices)
    while True:
        for i in reversed(range(r)):
            if indices[i] != n - 1:
                break
        else:
            return
        indices[i:] = [indices[i] + 1] * (r - i)
        yield tuple(pool[i] for i in indices)

# проверка является ли числом
def check_input(entry):
    try:
        int(entry.get())
    except ValueError:
        error_window = tk.Toplevel(root)
        error_window.title("Ошибка")
        error_label = tk.Label(error_window, text="Пожалуйста, введите число, а не букву.")
        error_label.pack()

def show_error_message(message):
    error_window = tk.Toplevel(root)
    error_window.title("Ошибка, нельзя купить открытки с заданными параметрми.")
    error_label = tk.Label(error_window, text=message)
    error_label.pack()


def generate_combo_2(K, N, max_sum, card_prices):
    comboes = []
    for num_cards in range(1, N + 1):
        card_types = []
        for i in range(1, K + 1):
            card_types.append(i)
        for combo in cwr(card_types, num_cards):
            if len(combo) == N:
                total_price = sum(card_prices[i - 1] for i in combo)
                if total_price <= max_sum:
                    comboes.append((combo, total_price))
    return comboes

def open_second_window():
    global K, N
    check_input(entry_K)
    check_input(entry_N)

    K = int(entry_K.get())
    N = int(entry_N.get())

    second_window = tk.Toplevel(root)
    second_window.title("Открытки - Ввод цен")

    label_max_sum = tk.Label(second_window, text="Введите максимальную сумму, которую вы можете потратить:")
    label_max_sum.pack()
    entry_max_sum = tk.Entry(second_window)
    entry_max_sum.pack()

    label_prices = tk.Label(second_window, text="Введите цены для открыток:")
    label_prices.pack()

    entry_prices = []
    for i in range(K):
        label = tk.Label(second_window, text=f"Цена для открытки {i + 1}:")
        label.pack()
        entry = tk.Entry(second_window)
        entry.pack()
        entry_prices.append(entry)

    calculate_button = tk.Button(second_window, text="Рассчитать", command=lambda: calculate_combinations(entry_max_sum, entry_prices))
    calculate_button.pack()

def calculate_combinations(entry_max_sum, entry_prices):
    max_sum = int(entry_max_sum.get())
    card_prices = [int(entry.get()) for entry in entry_prices]

    comboes = generate_combo_2(K, N, max_sum, card_prices)

    if len(comboes) == 0:
        show_error_message("Невозможно купить открытки с заданными параметрами")
    else:
        result_label.config(text="")
        result_text = ""
        for combo, total_price in comboes:
            cards_output = ""
            for card in combo:
                card_output = f"Открытка {card} ({card_prices[card - 1]} руб.)\n"
                cards_output += card_output
            result_text += f"Сумма покупки: {total_price} руб.\n{cards_output}\n"

        third_window = tk.Toplevel(root)
        third_window.title("Открытки - Комбинации")

        scrolled_text = scrolledtext.ScrolledText(third_window, wrap=tk.WORD, width=50, height=20)
        scrolled_text.insert(tk.END, result_text)
        scrolled_text.pack()


root = tk.Tk()
root.title("Открытки - Ввод K и N")

label_K = tk.Label(root, text="Введите количество видов рождественских открыток:")
label_K.pack()
entry_K = tk.Entry(root)
entry_K.pack()

label_N = tk.Label(root, text="Введите количество открыток, которое нужно купить:")
label_N.pack()
entry_N = tk.Entry(root)
entry_N.pack()

open_second_window_button = tk.Button(root, text="Далее", command=open_second_window)
open_second_window_button.pack()

result_label = tk.Label(root, text="")
result_label.pack()

root.mainloop()
