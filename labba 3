#12.	Формируется матрица F следующим образом: если вВ количество простых чисел в нечетных столбцах в области 2 больше, чем сумма чисел в 
#четных строках в области 1, то поменять в Е симметрично области 1 и 2 местами, иначе С и Е поменять местами несимметрично. При этом матрица А не меняется. 
#После чего вычисляется выражение: ((К*A)*А–K*AT.Выводятся по мере формирования А, F и все матричные операции последовательно.

#A = E B          1 
#    D C         3 2
#                 4





import random


def isitPrime(k):  # Функция для проверки, является ли число простым
    if k < 0:
        k *= -1
    if k == 2 or k == 3: return True
    if k % 2 == 0 or k < 2: return False
    for i in range(3, int(k ** 0.5) + 1, 2):
        if k % i == 0:
            return False

    return True


K_test = 2
N_test = 10
A_test = [
    [1, 2, 3, 4, 1, 4, -9, 8, 1, 1],
    [6, 7, 8, 5, 5, 2, 4, 8, -5, 5],
    [10, 9, 8, 1, 3, 9, -3, 3, 5, -5],
    [5, 4, 3, 2, 1, -5, 2, 7, 3, 8],
    [1, 2, 3, 4, 4, -4, 3, 3, -2, 4],
    [-1, 8, 6, 10, -3, 7, -8, -9, -9, -5],
    [-2, -6, -3, 1, 2, -3, 0, 5, 0, 0],
    [-7, 10, -4, -8, -9, -9, 0, 5, 0, -10],
    [3, 6, -9, 7, 2, -10, 4, 0, 2, -4],
    [10, 9, 9, 5, 8, -8, -8, 0, 10, -7]]


print('Какие вы хотите использовать данные: случайные или тестовые?.')
choice = input('Введите 1, если хотите использовать тестовые данные, 2 - если случайные): ')

if choice == '1':
    K = K_test
    N = N_test
    A = A_test

if choice == '2':
    K = int(input('Введите K: '))
    N = int(input('Введите N (размерность квадратной матрицы): '))

    if N < 6:
        print('Число N слишком маленькое для размерности матрицы. Введите N больше 5!')
        exit()

    A = []
    for row in range(N):
        cur_row = []
        for col in range(N):
            cur_row.append(random.randint(-10, 10))
        A.append(cur_row)

B, C, D, E = [], [], [], []
size = N // 2  # размерность матриц B, C, D, E (n x n)

if N % 2 == 0:
    step = N // 2
else:
    step = N // 2 + 1

for row in range(size):
    row_b, row_c, row_d, row_e = [], [], [], []
    for col in range(size):
        row_e.append(A[row][col])
        row_b.append(A[row][col + step])
        row_d.append(A[row + step][col])
        row_c.append(A[row + step][col + step])
    B.append(row_b)
    C.append(row_c)
    D.append(row_d)
    E.append(row_e)


# Формируем новую матрицу из подматриц
new_A = []
for i in range(size):
    new_A.append(E[i] + B[i])
for i in range(size):
    new_A.append(D[i] + C[i])

# Выводим матрицу А
print("Матрица А:")
for row in new_A:
    print(row)

# Выводим подматрицы B, C, D, E
print("Подматрица B:")
for row in B:
    print(row)

print("Подматрица C:")
for row in C:
    print(row)

print("Подматрица D:")
for row in D:
    print(row)

print("Подматрица E:")
for row in E:
    print(row)

n = size//2         #половина подматрицы

#Вычеслияем количество простых чисел в нечетных столбцах в области 2 в матрице B
prime_count = 0
for col in range(size-1, n, -1):
    if col % 2 == 0:
        for row in range(size - col, col):
            if isitPrime(B[row][col]):
                prime_count += 1
print(f'количество простых чисел в нечетных столбцах в области 2 в матрице B: {prime_count}')

#Вычеслияем сумму чисел в четных строках в области 1 в матрице B
summ = 0
for row in range(1,n+1):
    if row % 2 == 1:
        for col in range(1, size-row):
            summ+=B[row][col]
print('Сумма чисел в четных строках в области 1:', summ)

F = [[A[i][j] for j in range(N)] for i in range(N)]

if prime_count > summ:
    print('количество простых чисел  области 2 больше, чем сумма  в четных строках в области 1, значит меняем  '
          'симметрично области E 1 и 2 местами')
    for i in range(n, size):
        for j in range(size - i - 1, i + 1):
            E[i][j], E[j][i] = E[j][i], E[i][j]
    F[:size] = [E[i] + B[i] for i in range(size)]
    F[size:] = [D[i] + C[i] for i in range(size)]
else:
    print('количество простых чисел  области 2 меньше, чем сумма  в четных строках в области 1, значит меняем С и Е меняем местами')
    F[:size] = [C[i] + B[i] for i in range(size)]
    F[size:] = [D[i] + E[i] for i in range(size)]
print("Матрица F:")
for row in F:
    print(row)

K_and_A = [] #  Умножаем матрицу A на K (К*A)
for row in range(len(new_A)):
    cur_row = []
    for col in range(len(new_A)):
        cur_row.append(0)
    K_and_A.append(
        cur_row)  # формируем пустую матрицу, чтобы была возможность доступа к элементам матрицы по индексам


for row in range(len(new_A)):
    for col in range(len(new_A)):
        K_and_A[row][col] = K * new_A[row][col]  #  матрица А умноженная на константу К
print('(К*A) матрица A умноженная на K: ')
for row in range(len(new_A)):
    print(K_and_A[row])

K_and_A_and_A = [] #Умножаем умноженную матрицу на матрицу А
for row in range(len(new_A)):
    K_and_A_row = []
    for i in range(len(new_A)):
        sum = 0
        for j in range(len(new_A)):
            sum += K_and_A[row][j] * new_A[j][i]
        K_and_A_row.append(sum)
    K_and_A_and_A.append(K_and_A_row)

print('(К*A)*А) Умножаем умноженную матрицу на матрицу А: ')
for row in range(len(new_A)):
    print(K_and_A_and_A[row])

A_transpose = [] # транспонированная матрица A
for row in range(len(new_A)):
    A_transpose_row = []
    for col in range(len(new_A)):
        A_transpose_row.append(new_A[col][row])
    A_transpose.append(A_transpose_row)

print('(AT) Транспонированная матрица A: ')
for row in range(len(new_A)):
    print(A_transpose[row])

A_transpose_mult_K = []  # матрица с результатом умножения K * Aт
for row in range(len(new_A)):
    cur_row = []
    for col in range(len(new_A)):
        cur_row.append(0)
    A_transpose_mult_K.append(cur_row)
    # формируем пустую матрицу, чтобы была возможность доступа к элементам матрицы по индексам

for row in range(len(new_A)):
    for col in range(len(new_A)):
        A_transpose_mult_K[row][col] = K * A_transpose[row][
            col]  # транспонированная матрица А умноженная на константу К

print('(K*AT) Транспонированная матрица A умноженная на K: ')
for row in range(len(new_A)):
    print(A_transpose_mult_K[row])


result_matrix = []  # результирующая матрица
for row in range(len(new_A)):  # формируем пустую матрицу, чтобы была возможность доступа к элементам матрицы по индексам
    cur_row = []
    for col in range(len(new_A)):
        cur_row.append(0)
    result_matrix.append(cur_row)

for row in range(len(new_A)):
    for col in range(len(new_A)):
        result_matrix[row][col]=K_and_A_and_A[row][col] - A_transpose_mult_K[row][col]

print('(К*A)*А–K*AT) Результат: ')
for row in range(len(new_A)):
    print(result_matrix[row])


